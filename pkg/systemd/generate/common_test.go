package generate

import (
	"strings"
	"testing"

	"github.com/containers/podman/v2/pkg/domain/entities"
	"github.com/stretchr/testify/assert"
)

func TestFilterPodFlags(t *testing.T) {

	tests := []struct {
		input []string
	}{
		{[]string{"podman", "pod", "create"}},
		{[]string{"podman", "pod", "create", "--name", "foo"}},
		{[]string{"podman", "pod", "create", "--pod-id-file", "foo"}},
		{[]string{"podman", "pod", "create", "--pod-id-file=foo"}},
		{[]string{"podman", "run", "--pod", "foo"}},
		{[]string{"podman", "run", "--pod=foo"}},
	}

	for _, test := range tests {
		processed := filterPodFlags(test.input)
		for _, s := range processed {
			assert.False(t, strings.HasPrefix(s, "--pod-id-file"))
			assert.False(t, strings.HasPrefix(s, "--pod"))
		}
	}
}

func TestQuoteArguments(t *testing.T) {
	tests := []struct {
		input  []string
		output []string
	}{
		{
			[]string{"foo", "bar=\"arg\""},
			[]string{"foo", "bar=\"arg\""},
		},
		{
			[]string{"foo", "bar=\"arg with space\""},
			[]string{"foo", "\"bar=\\\"arg with space\\\"\""},
		},
		{
			[]string{"foo", "bar=\"arg with\ttab\""},
			[]string{"foo", "\"bar=\\\"arg with\\ttab\\\"\""},
		},
	}

	for _, test := range tests {
		quoted := quoteArguments(test.input)
		assert.Equal(t, test.output, quoted)
	}
}

func Test_generateHeaderTemplate(t *testing.T) {
	tests := []struct {
		name    string
		options entities.GenerateSystemdOptions
		want    string
	}{
		{
			"No Header",
			entities.GenerateSystemdOptions{NoHeader: true},
			`# {{{{.ServiceName}}}}.service

[Unit]
Description=Podman {{{{.ServiceName}}}}.service
Documentation=man:podman-generate-systemd(1)
Wants=network.target
After=network-online.target
`,
		},
		{
			"With Header",
			entities.GenerateSystemdOptions{NoHeader: false},
			`# {{{{.ServiceName}}}}.service
# autogenerated by Podman {{{{.PodmanVersion}}}}
{{{{- if .TimeStamp}}}}
# {{{{.TimeStamp}}}}
{{{{- end}}}}

[Unit]
Description=Podman {{{{.ServiceName}}}}.service
Documentation=man:podman-generate-systemd(1)
Wants=network.target
After=network-online.target
`,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := generateHeaderTemplate(tt.options); got != tt.want {
				t.Errorf("generateHeaderTemplate() = %v, want %v", got, tt.want)
			}
		})
	}
}
